///<author>dev@bassetti.fr</author>
///<summary>Unit loading / unloading the dll named "TxFormulas". This file is generated by TXUtils. Do not modify.</summary>
unit U_Abstract_TxFormulas;
interface

uses
  Windows,SysUtils,U_Small_Lib;

type
  {$REGION 'U_TxFormulas'}
  TxResult=class(TObject)
  public
    function Get_Value: Extended; virtual; stdcall; abstract;
    procedure Set_Value(AValue: Extended); virtual; stdcall; abstract;
    function Get_Unit: string; virtual; stdcall; abstract;
    procedure Set_Unit(AUnit: string); virtual; stdcall; abstract;
  end;

  TxVariable=class(TxResult)
  public
    function Get_Name: string; virtual; stdcall; abstract;
    procedure Set_Name(AName: string); virtual; stdcall; abstract;
    function To_JSON: TJSONObject; virtual; stdcall; abstract;
  end;

  TxFormula=class(TObject)
  public
    function Get_Variable(AName: string): TxVariable; virtual; stdcall; abstract;
    procedure Set_Variable(AVariable: TxVariable); virtual; stdcall; abstract;
    function Get_OL_Variable: TObjectList; virtual; stdcall; abstract;
    function Get_Formula: string; virtual; stdcall; abstract;
    function Get_Result: TxResult; virtual; stdcall; abstract;
    function Is_Variable(AVariable: TxVariable): Boolean; virtual; stdcall; abstract;
    function To_JSONStr: string; virtual; stdcall; abstract;
  end;

  TCreate_Formula=function: TxFormula; stdcall;

  TSave_Formula=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TGet_Formula=function(AArr_Input: array of TVarRec): TArr_VarRec; stdcall;

  TCreate_Variable=function: TxVariable; stdcall;
  {$ENDREGION}



var
  {$REGION 'U_TxFormulas'}
  Create_Formula: TCreate_Formula;
  Save_Formula: TSave_Formula;
  Get_Formula: TGet_Formula;
  Create_Variable: TCreate_Variable;
  {$ENDREGION}


///<summary>Procedure loading the dll named "TxFormulas".</summary>
///<param name="AFilePath">The absolute path to the dll.</param>
procedure Load_TxFormulas(AFilePath: string);

///<summary>Procedure unloading the dll named "TxFormulas".</summary>
procedure Unload_TxFormulas;

///<summary>Function returning true if the dll "TxFormulas" was loaded.</summary>
function Get_Dll_TxFormulas_Loaded: boolean;

implementation

var
  hDll: THandle;

procedure Load_TxFormulas(AFilePath: string);
resourcestring
  RS_Error_Invalide_File='Le fichier %s n''est pas valide.';
begin
  if hDll <> 0 then
    exit;

  Check_FileExists(AFilePath);

  hDll := Load_Dll(AFilePath);

  {$REGION 'U_TxFormulas'}
  @Create_Formula := Get_Dll_Function_Adress(hDll,'Create_Formula',AFilePath);
  @Save_Formula := Get_Dll_Function_Adress(hDll,'Save_Formula',AFilePath);
  @Get_Formula := Get_Dll_Function_Adress(hDll,'Get_Formula',AFilePath);
  @Create_Variable := Get_Dll_Function_Adress(hDll,'Create_Variable',AFilePath);
  {$ENDREGION}


end;

procedure Unload_TxFormulas;
begin
  if hDll <> 0 then
  begin
    try
      FreeLibrary(hDll);
      hDll := 0;
    except
    end;
  end;
end;

function Get_Dll_TxFormulas_Loaded: boolean;
begin
  result := (hDll>0)
end;

initialization
  hDll := 0;

finalization
  Unload_TxFormulas;

end.